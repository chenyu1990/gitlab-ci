#!/bin/bash

# IMAGE=chenyu1990/nginx-amplify-php:1.0.0
GO_IMAGE=chenyu1990/go-alpine:1.0.0

GO_CONTAINER=$CI_PROJECT_NAME-go

MYSQL_VERSION=5.7.27
MYSQL_CONTAINER_NAME=mysql-$MYSQL_VERSION
MYSQL_CONTAINER_NETWORK=$MYSQL_CONTAINER_NAME-network

GO_ROOT=/data/go
GO_PROJECT_ROOT=$GO_ROOT/$CI_PROJECT_NAME

function usage(){
    echo "Usage"
    echo "nginx-go [-s|--use-ssl]"
    exit -1
}

TEMP=`getopt -o s --long use-ssl: \
     -n 'nginx-go' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
# set 会重新排列参数的顺序，也就是改变$1,$2...$n的值，这些值在getopt中重新排列过了
eval set -- "$TEMP"

# 经过getopt的处理，下面处理具体选项。
while true ; do
    case "$1" in
        # -d|--domain)
        #     case "$2" in
        #         "") echo "e.g. nginx-redirect-to-docker --domian=w.abc.com "; shift 2 ;;
        #         *)  DOMAIN=$2 ; shift 2 ;;
        #     esac ;;
        -c|--conf)
            case "$2" in
                "") echo "e.g. nginx-go"; shift 2 ;;
                *)  CONF_FILE=$2 ; shift 2 ;;
            esac ;;
        -s|--use-ssl)
			SSL=true ; shift ;;
        --) shift ; break ;;
        *)
			;;
    esac
done

# 创建网络
DOCKER_NETWORK=`docker network ls | grep -w $CI_PROJECT_NAME-network`
if [ -z "$DOCKER_NETWORK" ]
then
    docker network create -d bridge $CI_PROJECT_NAME-network
fi

CONTAINER_PHPMYADMIN_DIR=/var/www/$CI_PROJECT_NAME/phpMyAdmin

# GO 先关闭容器，不然程序在运行，无法更新
docker rm -f $GO_CONTAINER

make build-for-alpine
sudo chown -R gitlab-runner:gitlab-runner $GO_ROOT/*
mkdir -p $GO_PROJECT_ROOT
sudo chown -R gitlab-runner:gitlab-runner $GO_ROOT/*
/bin/cp -r ./ $GO_PROJECT_ROOT
# sudo chown -R www-data:www-data $GO_PROJECT_ROOT
cd $GO_PROJECT_ROOT
make swagger

# 启动项目容器
docker run -d \
    -p :10088 \
    --name $GO_CONTAINER \
    --cpus=1 \
    -v $GO_PROJECT_ROOT:/root/ \
    --restart on-failure \
    --network $MYSQL_CONTAINER_NETWORK \
    $GO_IMAGE

DOCKER_STATUS=$(docker ps -q --filter name=$GO_CONTAINER)
if [ -z "$DOCKER_STATUS" ]
then
    echo $GO_CONTAINER not running.
    docker logs $GO_CONTAINER
    exit -1
fi

# DOCKER_STATUS=$(docker ps -q --filter name=$PHP_CONTAINER)
# if [ -z "$DOCKER_STATUS" ]
# then
#     echo $PHP_CONTAINER not running.
#     docker logs $PHP_CONTAINER
#     exit -1
# fi

PORT=`docker inspect -f '{{range $p,$conf := .NetworkSettings.Ports}}{{(index $conf 0).HostPort}}{{end}}' $GO_CONTAINER`
if [ -z "$PORT" ]
then
    echo $GO_CONTAINER port is invalid
    exit 1
fi

#IPADDR=docker-uat
# IPADDR=`docker inspect -f '{{.NetworkSettings.Networks.bridge.Gateway}}' $CI_PROJECT_NAME`
IPADDR=0.0.0.0

function write_nginx_web_config(){
if [ $SSL ]
then
cat > $WEB_SERVER_CONFIG_PATH << EOF
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN};
    return 301 https://\$host\$request_uri;
    access_log  null;
    error_log   null;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name ${DOMAIN};

    ssl_certificate /etc/letsencrypt/live/${DOMAIN_MIDDLE}.${DOMAIN_SUFFIX}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_MIDDLE}.${DOMAIN_SUFFIX}/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    access_log  /var/log/nginx/${CI_PROJECT_NAME}-ssl_access.log;
    error_log   /var/log/nginx/${CI_PROJECT_NAME}-ssl_error.log;

    location / {
        proxy_http_version      1.1;
        client_max_body_size    0;
        proxy_request_buffering off;
        client_body_temp_path   /tmp;

        proxy_set_header    Host                \$http_host;
        proxy_set_header    X-Real-IP           \$remote_addr;
        proxy_set_header    X-Forwarded-Ssl     on;
        proxy_set_header    X-Forwarded-For     \$proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   \$scheme;
        proxy_pass http://${IPADDR}:${PORT};
    }
}
EOF
else
cat > $WEB_SERVER_CONFIG_PATH << EOF
server {
    listen 80;
    server_name ${DOMAIN};

    access_log  /var/log/nginx/${CI_PROJECT_NAME}_access.log;
    error_log   /var/log/nginx/${CI_PROJECT_NAME}_error.log;

    location / {
        proxy_http_version 1.1;
        client_max_body_size    0;
        proxy_request_buffering off;
        client_body_temp_path   /tmp;

        proxy_set_header    Host                \$http_host;
        proxy_set_header    X-Real-IP           \$remote_addr;
        proxy_set_header    X-Forwarded-For     \$proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   \$scheme;
        proxy_pass http://${IPADDR}:${PORT};
    }
}
EOF
fi
}

function check_nginx_config_exist() {
	local RESULT=`grep -e "[,| ]$DOMAIN" $WEB_SERVER_SITES_AVAILABLE/* --exclude $WEB_SERVER_SITES_AVAILABLE/$CI_PROJECT_NAME`
	if [ -n "$RESULT" ]
	then
		echo "domain(s) already exist, only update .."
		return 1
	fi
	return 0
}

function service_nginx_reload() {
    # visudo
    # gitlab-runner ALL=(ALL:ALL) NOPASSWD: /usr/sbin/service nginx *
    NGINX_CONFIG_TEST=`sudo service nginx configtest`
    if [ $? == 0 ]
    then
        sudo service nginx reload
    else
        ngxsite -q -d $CI_PROJECT_NAME
        echo redirection catch errors
        exit 1
    fi
}

function write_web_config() {
    WEB_SERVER_CONF_FILE="$(awk -F= -v RS=' ' '/conf-path/ {print $2}' <<< $(nginx -V 2>&1))"
    WEB_SERVER_CONF_DIR="${WEB_SERVER_CONF_FILE%/*}"
    WEB_SERVER_SITES_AVAILABLE="$WEB_SERVER_CONF_DIR/sites-available"
    WEB_SERVER_SITES_ENABLED="$WEB_SERVER_CONF_DIR/sites-enabled"
    WEB_SERVER_CONFIG_PATH="$WEB_SERVER_SITES_AVAILABLE/$CI_PROJECT_NAME"
    check_nginx_config_exist
    if [ $? == 0 ]
    then
        write_nginx_web_config
        ngxsite -q -e $CI_PROJECT_NAME
        service_nginx_reload
        exit
    fi
}


if [ -z "$DOMAIN" ] ; then echo "domain is required" ; exit 1 ; fi
if ! expr $DOMAIN : '[A-Za-z0-9-]\{1,\}\(\.[A-Za-z0-9-]\{1,\}\)*\(\.[A-Za-z]\{2,\}\)$' >/dev/null; then
	echo only support secondary domain names...
    exit 1
fi

function split_domain() {
    OLD_IFS="$IFS"
    IFS="."
    array=($DOMAIN)
    IFS="$OLD_IFS" 
	
	if [ ${#array[@]} != 3 ]
	then
		echo only support secondary domain names...
		exit 1
	fi
	DOMAIN_MIDDLE=${array[1]}
	DOMAIN_SUFFIX=${array[2]}
}

split_domain
write_web_config
